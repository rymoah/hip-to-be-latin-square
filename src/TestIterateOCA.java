

/**
 * Test class to check the orthogonality of the latin squares generated by
 * bipermutive rules of a given radius up to 2 and their iterates
 * 
 * @author Luca Mariot
 */

import oca.BuildLatSqCA;
import oca.LatinSquareTools;
import oca.OneDimCellAut;
import boolfun.BoolFunReps;
import boolfun.CheckProp;
import boolfun.BooleanFunction;
import boolfun.BinTools;
import java.math.BigInteger;

public class TestIterateOCA {
    
    public static void main(String[] args) {
        
        if(args.length!= 1) {
            
            System.err.println("Usage: java lowlevelfunc.oa.TestIterateOCA"
                                +" diameter");
            System.exit(1);
            
        }
        
        int d = Integer.parseInt(args[0]);
        OneDimCellAut ca = new OneDimCellAut(2*(d-1), null, d, 0);
        BigInteger index = BigInteger.ZERO;
        BigInteger end = new BigInteger("2");
        int exp = (int)Math.pow(2,d-1);
        end = end.pow(exp);

        while(index.compareTo(end)==-1) {

            //Encode the current index as a pair of bipermutive rules.
            boolean[] pairconf = BinTools.dec2Bin(index, (int)Math.pow(2, d-1));
            boolean[] graphconf1 = new boolean[(int)Math.pow(2, d-2)];
            boolean[] graphconf2 = new boolean[(int)Math.pow(2, d-2)];
            System.arraycopy(pairconf, 0, graphconf1, 0, graphconf1.length);
            System.arraycopy(pairconf, graphconf1.length, graphconf2, 0, graphconf2.length);
            boolean[] biprule1 = BoolFunReps.decodeBipFunc(graphconf1, d);
            BigInteger biprulenum1 = BinTools.bin2DecBig(biprule1);
            boolean[] biprule2 = BoolFunReps.decodeBipFunc(graphconf2, d);
            BigInteger biprulenum2 = BinTools.bin2DecBig(biprule2);

            //Build the corresponding two Latin squares and check for orthogonality
            ca.setRule(biprule1);
            int[][] matrix1 = BuildLatSqCA.buildSqMatCA(ca,d-1);
            
            ca.setRule(biprule2);
            int[][] matrix2 = BuildLatSqCA.buildSqMatCA(ca,d-1);
            
            boolean orthog = LatinSquareTools.checkOrthogLatSquare(
                        matrix1, matrix2);
            
            //If orthogonal, print info
            if(orthog) {
                
                BooleanFunction bf1 = new BooleanFunction(biprule1,d);
                CheckProp.computeANF(bf1);
                    
                BooleanFunction bf2 = new BooleanFunction(biprule2,d);
                CheckProp.computeANF(bf2);
                
                int[] card = LatinSquareTools.checkPairsTable(biprule1, biprule2);

                System.out.print("Rule: "+biprulenum1+" ; ANF: ");
                CheckProp.printANF(bf1);
                System.out.print(" ; Rule: "+biprulenum2+" ; ANF: ");
                CheckProp.printANF(bf1);
                System.out.println("");
                
                //Print the cycle decomposition of the OLS iterations
                LatinSquareTools.decomposeOLSCycles(matrix1, matrix2);
                
                System.out.println("");
                
            }
            
            //Update counter
            index = index.add(BigInteger.ONE);
            //System.out.println(index);
            
        }
        
        
    }
    
}

